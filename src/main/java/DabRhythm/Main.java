/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DabRhythm;

import Core.App;
import Core.Engine;
import Entities.EntityManager;
import Graphics.ProjectionMatrix;
import Graphics.Batch.SpriteBatch;
import Graphics.Models.Texture;
import Menus.MainMenu;
import Scenes.MenuScene;
import Scenes.Scene;
import Scenes.SceneManager;
import Scenes.SongBrowserScene;
import System.RenderSystem;
import States.*;

import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.glfw.GLFW.*;

import java.util.HashMap;
import Graphics.Graphics;

public class Main extends App {

    public static final Engine engine = new Engine();
    private Graphics graphics;

    {
        WIDTH = 960;
        HEIGHT = 540;
        TITLE = "DabRhythm";
        hints = new HashMap<>() {
            {
                put(GLFW_RESIZABLE, 0);
            }
        };
        fullscreen = false;
    }

    public void init() {
        ProjectionMatrix.createProjectionMatrix2D(0, engine.getMainWindow().getWidth(),
                engine.getMainWindow().getHeight(), 0);
        graphics = engine.createGraphics();

        Beats.updateList();
        Skins.updateSkins();
        SkinLoader.load("Default Skin");

        SceneManager.addScene(new MenuScene());
        SceneManager.addScene(new SongBrowserScene());

        SceneManager.setCurrentScene(SceneManager.getScene(MenuScene.class));
    }

    public void render() {
        glClear(GL_COLOR_BUFFER_BIT);
        SceneManager.getCurrentScene().render(graphics);
    }

    public void update() {
        SceneManager.getCurrentScene().tick();
    }

    public static void main(String[] args) {
        engine.init(new Main());
        engine.run();
    }

    public static class Config {

        public static int left_arrow_button = GLFW_KEY_D, 
        up_arrow_button = GLFW_KEY_F, 
        down_arrow_button = GLFW_KEY_J, 
        right_arrow_button = GLFW_KEY_K;
    }

    public static class Skin {

        public static String skin_name;

        public static final Texture[] mania_key = new Texture[4];
        public static final Texture[] mania_key_down = new Texture[4];
        public static final Texture[] note = new Texture[4];

        public static final Texture[] score = new Texture[10];
        public static final Texture[] normal = new Texture[10];
        public static final Texture[] combo = new Texture[10];

        public static Texture score_percent;
        public static Texture score_x;

        public static final Texture[] count = new Texture[3];
        public static Texture go;

        public static Texture hit0, hit50, hit100, hit200, hit300;

    }

    public static class Judgement {

        public enum Judge {
            HIT_MISS(0.4f, 0, Main.Skin.hit0),
            HIT_300(0.025f, 300, Main.Skin.hit300),
            HIT_200(0.05f, 200, Main.Skin.hit200),
            HIT_100(0.1f, 100, Main.Skin.hit100),
            HIT_50(0.2f, 50, Main.Skin.hit50),
            HIT_NULL(0, 0, Main.Skin.hit0);

            private float hitWindow;
            private int score;
            private Texture sign;
            Judge(float window, int score, Texture sign){
                this.hitWindow = window;
                this.score = score;
                this.sign = sign;
            }

            public float getHitWindow(){
                return hitWindow;
            }

            public float getScore(){
                return score;
            }

            public Texture getSign(){
                return sign;
            }
        }

        public static Judge getJudge(float delta){
            delta = Math.abs(delta);
            Judge result = Judge.HIT_NULL;
            for(Judge j : Judge.values()){
                if(delta <= j.getHitWindow()){
                    result = j;
                }
            }
            return result;
        }
    }
}
